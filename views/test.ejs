<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <link rel="stylesheet" href="home.css">

    <title>FreightWise Programming Test</title>

    <!-- <p>Click the button to get your current location weather.</p>

    <button onclick="getLocation()">Get Location</button> -->

    <script>
        'use strict';

        /**
         * Software Developer test.
         *
         * Doing research and making API calls are an important part of what we do at FreightWise.  This test will
         * demonstrate your abilities to:
         *
         * - Make an API call
         * - Research an API
         * - Do basic DOM manipulation
         * - Parse data
         * - Handle errors
         * - Be creative
         *
         * Feel free to ask any questions you may have.  Use a lot of comments, and explain why you are doing things.
         * Don't spend more than 1-2 hours on it - we aren't expecting a finished product, but it should work and look
         * nice.  Feel free to use any third party libraries, and if you do so, explain why you used them instead of
         * built in browser APIs.
         *
         * Instructions:
         * - Use the axios (https://github.com/axios/axios) request library to make an API call to the OpenWeatherMap
         *   API for Current Weather Data using this API key:  25e989bd41e3e24ce13173d8126e0fd6
         *   We've already imported this library to get you started.
         * - Use either async/await or Promises.
         * - Get the weather for Brentwood, TN, and write it to the DOM using the `setResults` method below.  Be
         *   creative and make it look nice.
         * - Handle errors and use the `setError` method below to display the error.  Also make it look nice.
         * - If you find any mistakes in the test, fix them, and leave a comment about what you fixed and why.
         * - Make sure your code is readable and maintainable.
         * - Use plenty of descriptive comments.
         * - Make sure your code runs in the latest version of Google Chrome and Firefox (ES6 is allowed).
         * - Make your code live (GitHub with GitHub pages works nice).
         * - Send a link to your finished test to dev-team-jobs@freightwisellc.com.
         *
         * Feel free to add your own twist to it (completely optional).  Here are a few ideas:
         * - Sign up for NewsAPI.org and get the Top Headlines and show them along with the weather.
         * - Use the browser location API to get the user's current location, and show that location's weather.
         * - Show a satellite map of the weather in Brentwood.
         * - Request a user's phone number and send them an SMS with the weather.
         */
        class Test {
            constructor() {
                this.testResults = document.getElementsByClassName('test-results');
            }

            async run() {
                
                console.log(new Date().toISOString(), '[Test]', 'Running the test');

                var x = document.getElementById("demo");
        
                if (navigator.geolocation) {
                let position = navigator.geolocation.getCurrentPosition(this.setResults);

                } else { 
                    x.innerHTML = "Geolocation is not supported by this browser.";
                }
           
            }      
               

            async setResults(position) {
        
                let latitude = position.coords.latitude
                let longitude = position.coords.longitude
                console.log(position)
                // this.setError('k')
                const monthNames = ["January", "February", "March", "April", "May", "June",
            "July", "August", "September", "October", "November", "December"
                            ];

                            let dateObj = new Date();
                            let month = monthNames[dateObj.getUTCMonth()];
                            let day = dateObj.getUTCDate() - 1;
                            let year = dateObj.getUTCFullYear();

                            let newdate = `${month} ${day}, ${year}`;

                            const app = document.querySelector('.app');
                        $.ajax({
                            url: `http://localhost:5000/weather?latitude=${latitude}&longitude=${longitude}`,
                            type: 'GET',
                            success: function(data) {
                                console.log(data)
            // TODO: Format the results
            // this.testResults.innerHTML = (data ).toString();
                
            
        
                        app.insertAdjacentHTML('afterbegin', `<div class="bar">
                        <div class="center"><a href="#"><i class="fas fa-crosshairs"></i></a></div>
                        <div class="search"><a href="#"><i class="fas fa-search"></i></a></div>
                    </div><div class="titlebar">
                    <p class="date">${newdate}</p>
                    <h4 class="city">${data.name}</h4>
                    <p class="description">${data.weather[0].description}</p>
                </div>
                <div class="temperature">
                    <img src="http://openweathermap.org/img/wn/${data.weather[0].icon}@2x.png" />
                    <h2>${Math.round(data.main.temp)}°C</h2>
                </div>
                <div class="extra">
                    <div class="col">
                        <div class="info">
                            <h5>Wind Status</h5>
                            <p>${data.wind.speed}mps</p>
                        </div>
                        <div class="info">
                            <h5>Visibility</h5>
                            <p>${data.visibility} m</p>
                        </div>
                    </div>
                    
                    <div class="col">
                        <div class="info">
                            <h5>Humidity</h5>
                            <p>${data.main.humidity}%</p>
                        </div>
                        <div class="info">
                            <h5>Air pressure</h5>
                            <p>${data.main.pressure} mph</p>
                        </div>
                    </div>
                </div>
                <div class="dataweather">
                    <h4>The next five days</h4>
                    <div class="table">
                        <div class="tempday">
                            <p>SUN</p>
                            <div class="box">
                            <i class="fas fa-wind"></i>
                            <p>23°C</p>
                            </div>
                        </div>
                        <div class="tempday">
                            <p>SUN</p>
                            <div class="box">
                            <i class="fas fa-cloud"></i>
                            <p>12°C</p>
                            </div>
                        </div>
                        <div class="tempday">
                            <p>SUN</p>
                            <div class="box">
                            <i class="fas fa-sun"></i>
                            <p>11°C</p>
                            </div>
                        </div>
                        <div class="tempday">
                            <p>SUN</p>
                            <div class="box">
                            <i class="far fa-sun"></i>
                            <p>10°C</p>
                            </div>
                        </div>
                        <div class="tempday">
                            <p>SUN</p>
                            <div class="box">
                            <i class="fas fa-cloud-sun"></i>
                            <p>05°C</p>
                            </div>
                        </div>
                    </div>

                </div>`)                }, 
                    error: function (xhr, ajaxOptions, thrownError) {
                        setError(thrownError)
                    }
                });
            }
        
            //         // TODO: Make the API call and handle the results
                

            setError(msg) {
                // TODO: Format the error
                console.log('message')
                // this.testResults.innerHTML = (message || '').toString();
                return this;
            }

        }
    </script>

    <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
    <script type="text/javascript" src="//ajax.googleapis.com/ajax/libs/jquery/2.0.0/jquery.min.js"></script>

</head>
<body>
    <div class="button-container"></div>

    <!-- <div class="test-results"></div> -->
    <div class="app"></div>


        <script>
            'use strict';

            /**
            * Creates a button for kicking off the test and adds it to the DOM.
            *
            * @param {HTMLElement} context  the parent element to add the button to
            * @param {Test}        test     the test to be executed
            * @returns {HTMLElement} the button added to the test
            */
            function addButtonForTest(context, test) {
                let testButton = document.createElement('button');

                testButton.type = 'button';
                testButton.innerText = 'Get the Nashville Weather';
                testButton.onclick = () => test.run();

                context.appendChild(testButton);

                return testButton;
            }

            // Create the Test and add a button to the UI for running the test
            const test = new Test();
            const buttonContainer = document.getElementsByClassName('button-container')[0];

            addButtonForTest(buttonContainer, test);

        </script>
        <script>
        </script>

</body>
<style>
       body {
            font-family: 'Montserrat', sans-serif;
            font-size: 16px;
        }
        p, h5 {
            margin: 0.5rem;
        }
        .app {
            width: 100%;
            height: 800px;
            display: block;
            margin-top: 50px;
            text-align: center;
            padding: 40px 0;
            overflow: hidden;
            background-image: linear-gradient(#30A2C5, #00242F);
        }
        .bar {
            display: flex;
            justify-content: space-between;
            padding: 0 40px;
        }
        .bar a {
            color: #fff;
            font-size: 20px;
        }
        .titlebar {
            line-height: 0.5rem;
            color: #fff;
        }
        .titlebar h4 {
            font-size: 40px;
            font-weight: bold;
            text-transform: uppercase;
            margin: 2rem;
        }
        .titlebar .description {
            text-transform: uppercase;
        }

        .temperature {
            background: rgb(206, 206, 206);
            border-radius: 500px;
            width: 200px;
            height: 200px;
            text-align: center;
            display: block;
            margin: auto;
            box-shadow: 0 30px 20px #1d1d1d36;
            margin: auto;
            margin-top: 30px;
            margin-bottom: 30px;
        }
        .temperature img {
            margin-bottom:-20px;
        }
        .temperature p {
            font-size: 14px;
        }
        .temperature h2 {
            margin: 0;
            font-size: 60px;
            font-weight: 300;
        }
        .extra {
            display: flex;
            justify-content: space-around;
            color: #fff;
            padding-bottom: 30px;
        }
        .extra .col .info{
            padding-bottom: 10px;
        }
        .dataweather {
            background: #fff;
            padding: 20px;
            border-radius: 50px;
            margin-top: 20px;
            display: block;
            height: 400px;
            font-size: 14px;
            position: relative;
        }
        .dataweather .table {
            display: flex;
            justify-content: space-around;
        }
        .dataweather .table .box {
            font-size: 14px;
            border:#D4D4D4 solid 1px;
            border-radius: 20px;
            padding: 5px;
            margin: 5px;
        }
        .dataweather .table div i {
            font-size:150%;
            color: #585858;
        }
        .dataweather .firm {
            padding-top: 20px;
            font-size: 12px;
        }
        .button-container {
            text-align: center;
        }

        .button-container > button {
            margin-top: 50px;
            padding: 10px 18px;
            color: white;
            background-color: #428AA8;
            border: none;
            border-radius: 3px;
            transition: all 200ms ease-in-out;
            font-size: 14px;
        }

        .button-container > button:hover {
            background-color: #428AA8;
        }

        .button-container > button:active {
            background-color: #428AA8;
        }
</style>
</html>
